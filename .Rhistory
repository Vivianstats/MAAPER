xlab("") + ylab("") +
coord_flip() +
theme(legend.position = "none",
strip.background = element_blank(),
axis.text.y=element_blank())
ggsave(paste0(plot_dir, "ngene-byRLDi.pdf"), width = 1.7, height = 1.5)
### boxplots (separate) -----------------------------
genes1 = res$gene[res$sig == TRUE & res$sample == "SCT"]
genes2 = res$gene[res$sig == TRUE & res$sample == "EVT"]
length(genes1)
length(genes2)
idx1 = which(res$gene %in% genes1 & res$sample == "SCT")
idx2 = which(res$gene %in% genes1 & res$sample == "EVT")
idx = union(idx1, idx2)
# res.sig = res[res$gene %in% genes3, ]
summary_df = res[idx, ] %>% group_by(sample) %>% summarise(m=median(RED))
summary_df$m = round(summary_df$m, digits = 2)
ggplot(res[idx, ], aes(x = sample, y = RED)) +
geom_boxplot(aes(fill = sample), outlier.shape = NA) +
geom_text(data = summary_df, aes(x = sample, label = m),
size = 3, y = -3.7, vjust = "inward")+
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
ylim(c(-3.5,3.5)) +
#ylim(c(-2, 1.5)) +
xlab("") + ylab("") +
theme(legend.position = "none",
axis.text.x=element_blank())
ggplot(res[idx, ], aes(x = sample, y = RED)) +
geom_boxplot(aes(fill = sample), outlier.shape = NA) +
geom_text(data = summary_df, aes(x = sample, label = m),
size = 3, y = -3.7, vjust = "inward")+
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
ylim(c(-3.5,3.5)) +
#ylim(c(-2, 1.5)) +
xlab("") + ylab("") +
theme(legend.position = "none",
axis.text.x=element_blank())
ggplot(res[idx, ], aes(x = sample, y = RED)) +
geom_boxplot(aes(fill = sample), outlier.shape = NA) +
# geom_text(data = summary_df, aes(x = sample, label = m),
#           size = 3, y = -3.7, vjust = "inward")+
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
ylim(c(-3.5,3.5)) +
#ylim(c(-2, 1.5)) +
xlab("") + ylab("") +
theme(legend.position = "none",
axis.text.x=element_blank())
ggplot(res[idx, ], aes(x = sample, y = RED)) +
geom_boxplot(aes(fill = sample), outlier.shape = NA) +
# geom_text(data = summary_df, aes(x = sample, label = m),
#           size = 3, y = -3.7, vjust = "inward")+
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
ylim(c(-3.5,3.5)) +
#ylim(c(-2, 1.5)) +
xlab("") + ylab("") + coord_flip() +
theme(legend.position = "none",
axis.text.y=element_blank())
ggplot(res[idx, ], aes(x = sample, y = RED)) +
geom_boxplot(aes(fill = sample), width = 0.65, outlier.shape = NA) +
# geom_text(data = summary_df, aes(x = sample, label = m),
#           size = 3, y = -3.7, vjust = "inward")+
scale_fill_manual(values = cols) + scale_color_manual(values = cols) +
ylim(c(-3.5,3.5)) +
#ylim(c(-2, 1.5)) +
xlab("") + ylab("") + coord_flip() +
theme(legend.position = "none",
axis.text.y=element_blank())
ggsave(paste0(plot_dir, "boxplot-RED-sep.pdf"), width = 1.5, height = 1.5)
ggplot(res[idx, ], aes(x = sample, y = RLDu)) +
geom_boxplot(aes(fill = sample), width = 0.65, outlier.shape = NA) +
# geom_text(data = summary_df, aes(x = sample, label = m),
#           size = 3, y = -1.05, vjust = "inward")+
scale_fill_manual(values = cols) +
ylim(c(-1, 0.7)) + xlab("") + ylab("") + coord_flip() +
theme(legend.position = "none",
axis.text.y=element_blank())
ggsave(paste0(plot_dir, "boxplot-RLDu-sep.pdf"), width = 1.5, height = 1.5)
ggsave(paste0(plot_dir, "boxplot-RLDu-sep.pdf"), width = 1.5, height = 1.4)
ggplot(res[idx, ], aes(x = sample, y = RLDi)) +
geom_boxplot(aes(fill = sample), width = 0.65, outlier.shape = NA) +
geom_text(data = summary_df, aes(x = sample, label = m),
size = 3, y = -2.2, vjust = "inward")+
scale_fill_manual(values = cols) +
ylim(c(-2.1, 2.1)) + xlab("") + ylab("") + coord_flip() +
theme(legend.position = "none",
axis.text.y=element_blank())
ggplot(res[idx, ], aes(x = sample, y = RLDi)) +
geom_boxplot(aes(fill = sample), width = 0.65, outlier.shape = NA) +
# geom_text(data = summary_df, aes(x = sample, label = m),
#           size = 3, y = -2.2, vjust = "inward")+
scale_fill_manual(values = cols) +
ylim(c(-2.1, 2.1)) + xlab("") + ylab("") + coord_flip() +
theme(legend.position = "none",
axis.text.y=element_blank())
ggsave(paste0(plot_dir, "boxplot-RLDi-sep.pdf"), width = 1.5, height = 1.4)
#---------------generate synthetic data---------------
num=500
theta0 <- c(10,10,8,3)
x <- rgamma(num,theta0[1]+theta0[2],theta0[3])
u <- rbeta(num,theta0[1],theta0[2])
y<-theta0[4]*x*u
sn <- read.csv('/Users/wei/Box/Project/2020coxpr/code/Wenqian201215/code/sn.csv')
sn<-as.matrix(sn)
sx<-sn*x
sy<-sn*y
z1 <- rpois(num,sx)
z2 <- rpois(num,sy)
sn<-as.vector(sn)
z<-rbind(z1,z2,sn)
N <- length(z1)
#-------------------functions------------------
subdensi <- function(a,b,c,sn,bk,dk){
integrand<-function(uu){uu^(a)*(1-uu)^(b)*(sn+bk+sn*dk*uu)^(c)}
fi2 <- integrate(function(uu)integrand(uu),0.0000001,0.9999999)$value
return (fi2)
}
Eta1 <- function(a1k,a2k,dk,bk,sn,z1,z2,base){
fx <- function(uu){uu^(z2+a1k-1)*(1-uu)^(a2k-1)*(sn+bk+sn*dk*uu)^(-a1k-a2k-z1-z2)*log(sn+bk+sn*dk*uu)}
fz <- integrate(function(uu)fx(uu),0.0000001,0.9999999)$value
eta <- digamma(a1k+a2k+z1+z2)-fz/base
return (eta)
}
Eta2 <- function(a1k,a2k,dk,bk,sn,z1,z2,base){
fx <- function(uu){uu^(z2+a1k-1)*(1-uu)^(a2k-1)*(sn+bk+sn*dk*uu)^(-a1k-a2k-z1-z2)*log(uu)}
fz <- integrate(function(uu)fx(uu),0.0000001,0.9999999)$value
eta <- fz/base
return (eta)
}
Eta3 <- function(a1k,a2k,dk,bk,sn,z1,z2,base){
fx <- function(uu){uu^(z2+a1k-1)*(1-uu)^(a2k-1)*(sn+bk+sn*dk*uu)^(-a1k-a2k-z1-z2)*log(1-uu)}
fz <- integrate(function(uu)fx(uu),0.0000001,0.9999999)$value
eta <- fz/base
return (eta)
}
Eta4 <- function(a1k,a2k,dk,bk,sn,z1,z2,base){
fz <- subdensi(z2+a1k,a2k-1,-a1k-a2k-z1-z2-1,sn,bk,dk)
eta <- sn*(a1k+a2k+z1+z2)*fz/base
return (eta)
}
Eta5 <- function(a1k,a2k,dk,bk,sn,z1,z2,base){
fz <- subdensi(z2+a1k-1,a2k-1,-a1k-a2k-z1-z2-1,sn,bk,dk)
eta <- (a1k+a2k+z1+z2)*fz/base
return (eta)
}
myfun <- function(startx,eta1,eta2,eta3){
ff <- function(x){
f <- numeric(length(x))
f[1] <-  (x[1]+x[2])/x[3]-eta1
f[2] <-  digamma(x[1])-log(x[3])-eta2
f[3] <-  digamma(x[2])-log(x[3])-eta3
f
}
result<-dfsane(startx,ff,control=list(maxit=2500,trace = FALSE)) #solve the equations, there have some warning
return (result$par)
}
#--------------EM for estimating parameters-------------
Niter=400
x0<-c(2, 2, 2, 2) #initial values; alpha_1, alpha_2, beta and d, respectively
x1<-x0
t1=proc.time()
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
a1
a1<-rep(x0[1],num)
a2<-rep(x0[2],num)
b<-rep(x0[3],num)
d<-rep(x0[4],num)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
mapply(rep, times = 1:4, x = 4:1)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
class(Base)
length(Base)
t1=proc.time()
for (i in 1:Niter){
print(i)
a1<-rep(x0[1],num)
a2<-rep(x0[2],num)
b<-rep(x0[3],num)
d<-rep(x0[4],num)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
E1<-mapply(Eta1,a1,a2,d,b,sn,z1,z2,Base)
E2<-mapply(Eta2,a1,a2,d,b,sn,z1,z2,Base)
E3<-mapply(Eta3,a1,a2,d,b,sn,z1,z2,Base)
E4<-mapply(Eta4,a1,a2,d,b,sn,z1,z2,Base)
E5<-mapply(Eta5,a1,a2,d,b,sn,z1,z2,Base)
ee1<-sum(E1)
ee2<-sum(E2)
ee3<-sum(E3)
ee4<-sum(E4)
ee5<-sum(E5)
#----update d----
x1[4]<-sum(z2)/ee4
#----update alpha_1,alpha_2,beta----
eta1 <- ee5/num
eta2 <- (ee1+ee2)/num
eta3 <- (ee1+ee3)/num
startx <- x0[1:3]
theta <- myfun(startx,eta1,eta2,eta3)
x1[1]<-theta[1]
x1[2]<-theta[2]
x1[3]<-theta[3]
x0<-x1
}
library("BB")
install.packages("BB")
library("BB")
#--------------EM for estimating parameters-------------
Niter=400
x0<-c(2, 2, 2, 2) #initial values; alpha_1, alpha_2, beta and d, respectively
x1<-x0
t1=proc.time()
for (i in 1:Niter){
print(i)
a1<-rep(x0[1],num)
a2<-rep(x0[2],num)
b<-rep(x0[3],num)
d<-rep(x0[4],num)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
E1<-mapply(Eta1,a1,a2,d,b,sn,z1,z2,Base)
E2<-mapply(Eta2,a1,a2,d,b,sn,z1,z2,Base)
E3<-mapply(Eta3,a1,a2,d,b,sn,z1,z2,Base)
E4<-mapply(Eta4,a1,a2,d,b,sn,z1,z2,Base)
E5<-mapply(Eta5,a1,a2,d,b,sn,z1,z2,Base)
ee1<-sum(E1)
ee2<-sum(E2)
ee3<-sum(E3)
ee4<-sum(E4)
ee5<-sum(E5)
#----update d----
x1[4]<-sum(z2)/ee4
#----update alpha_1,alpha_2,beta----
eta1 <- ee5/num
eta2 <- (ee1+ee2)/num
eta3 <- (ee1+ee3)/num
startx <- x0[1:3]
theta <- myfun(startx,eta1,eta2,eta3)
x1[1]<-theta[1]
x1[2]<-theta[2]
x1[3]<-theta[3]
x0<-x1
}
t2=proc.time()
t=t2-t1
warnings()
x0
theta0
4.916289/(4.916289+3.242341)
myfun2 <- function(startx,eta1,eta2,eta3){
ff <- function(x){
f <- numeric(length(x))
beta = (x[1]+x[2])/eta1
# f[1] <-  (x[1]+x[2])/x[3]-eta1
f[1] <-  digamma(x[1])-log(beta)-eta2
f[2] <-  digamma(x[2])-log(beta)-eta3
f
}
result<-dfsane(startx,ff,control=list(maxit=2500,trace = FALSE)) #solve the equations, there have some warning
return (result$par)
}
myfun2 <- function(startx,eta1,eta2,eta3){
ff <- function(x){
f <- numeric(length(x))
beta = (x[1]+x[2])/eta1
# f[1] <-  (x[1]+x[2])/x[3]-eta1
f[1] <-  digamma(x[1])-log(beta)-eta2
f[2] <-  digamma(x[2])-log(beta)-eta3
f
}
result<-dfsane(startx,ff,control=list(maxit=2500,trace = FALSE)) #solve the equations, there have some warning
return (result$par)
}
#--------------EM for estimating parameters-------------
Niter=400
x0<-c(2, 2, 2, 2) #initial values; alpha_1, alpha_2, beta and d, respectively
x1<-x0
t1=proc.time()
for (i in 1:Niter){
print(i)
a1<-rep(x0[1],num)
a2<-rep(x0[2],num)
b<-rep(x0[3],num)
d<-rep(x0[4],num)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
E1<-mapply(Eta1,a1,a2,d,b,sn,z1,z2,Base)
E2<-mapply(Eta2,a1,a2,d,b,sn,z1,z2,Base)
E3<-mapply(Eta3,a1,a2,d,b,sn,z1,z2,Base)
E4<-mapply(Eta4,a1,a2,d,b,sn,z1,z2,Base)
E5<-mapply(Eta5,a1,a2,d,b,sn,z1,z2,Base)
ee1<-sum(E1)
ee2<-sum(E2)
ee3<-sum(E3)
ee4<-sum(E4)
ee5<-sum(E5)
#----update d----
x1[4]<-sum(z2)/ee4
#----update alpha_1,alpha_2,beta----
eta1 <- ee5/num
eta2 <- (ee1+ee2)/num
eta3 <- (ee1+ee3)/num
# startx <- x0[1:3]
# theta <- myfun(startx,eta1,eta2,eta3)
# x1[1]<-theta[1]
# x1[2]<-theta[2]
# x1[3]<-theta[3]
startx <- x0[1:2]
theta <- myfun2(startx,eta1,eta2,eta3)
x1[1]<-theta[1]
x1[2]<-theta[2]
x1[3]<-(x1[1]+x1[2])/eta1
x0<-x1
}
t2=proc.time()
t=t2-t1
print(x1)
theta
theta0
13/(13+8)
4.916289/(4.916289+3.242341)
myfun2 <- function(startx,eta1,eta2,eta3){
ff <- function(x){
f <- numeric(length(x))
beta = (x[1]+x[2])/eta1
# f[1] <-  (x[1]+x[2])/x[3]-eta1
f[1] <-  digamma(x[1])-log(beta)-eta2
f[2] <-  digamma(x[2])-log(beta)-eta3
f
}
result<-dfsane(startx,ff,control=list(trace = FALSE)) #solve the equations, there have some warning
return (result$par)
}
#--------------EM for estimating parameters-------------
Niter=400
x0<-c(2, 2, 2, 2) #initial values; alpha_1, alpha_2, beta and d, respectively
x1<-x0
t1=proc.time()
for (i in 1:Niter){
print(i)
a1<-rep(x0[1],num)
a2<-rep(x0[2],num)
b<-rep(x0[3],num)
d<-rep(x0[4],num)
Base<-mapply(subdensi,z2+a1-1,a2-1,-a1-a2-z1-z2,sn,b,d)
E1<-mapply(Eta1,a1,a2,d,b,sn,z1,z2,Base)
E2<-mapply(Eta2,a1,a2,d,b,sn,z1,z2,Base)
E3<-mapply(Eta3,a1,a2,d,b,sn,z1,z2,Base)
E4<-mapply(Eta4,a1,a2,d,b,sn,z1,z2,Base)
E5<-mapply(Eta5,a1,a2,d,b,sn,z1,z2,Base)
ee1<-sum(E1)
ee2<-sum(E2)
ee3<-sum(E3)
ee4<-sum(E4)
ee5<-sum(E5)
#----update d----
x1[4]<-sum(z2)/ee4
#----update alpha_1,alpha_2,beta----
eta1 <- ee5/num
eta2 <- (ee1+ee2)/num
eta3 <- (ee1+ee3)/num
# startx <- x0[1:3]
# theta <- myfun(startx,eta1,eta2,eta3)
# x1[1]<-theta[1]
# x1[2]<-theta[2]
# x1[3]<-theta[3]
startx <- x0[1:2]
theta <- myfun2(startx,eta1,eta2,eta3)
x1[1]<-theta[1]
x1[2]<-theta[2]
x1[3]<-(x1[1]+x1[2])/eta1
x0<-x1
}
t2=proc.time()
t=t2-t1
print(x1)
print(paste0('time: ',t[3][[1]],'s'))
sqrt(0.62)
sqrt(0.5)
rm(list = ls())
library(Seurat)
dir = "~/Box/Project/2020coxpr/code/irradiation/data/GSE123516_RAW"
data_normal = readRDS(paste0(dir, "normal.rds"))
dir = "~/Box/Project/2020coxpr/code/irradiation/data/GSE123516_RAW/"
data_normal = readRDS(paste0(dir, "normal.rds"))
data_irr = readRDS(paste0(dir, "irr.rds"))
class(data_normal$count)
dim(data_normal$count)
dim(data_irr$count)
table(data_normal$clust.pub)
table(data_irr$clust.pub)
table(data_normal$clust.pub, data_irr$clust.pub)
dim(data_normal$count)
dim(data_irr$count)
## normal crypt cells
count_normal = data_normal$count
## irradiated crypt cells
count_irr = data_rr$count
## irradiated crypt cells
count_irr = data_irr$count
count_irr[1:3,1:3]
600*2000*30/3600
600*2000*30/3600/10
600*100*30/3600
## get TF list
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv', sep = '\t', header = TRUE)
TF = data_tf$Transcription.factor
length(TF)
TF
## get TF list
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv', sep = '\t', header = TRUE)
TF = data_tf$Transcription.factor
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_di.tsv', sep = '\t', header = TRUE)
TF = data_tf$Transcription.factor
length(TF)
## get TF list
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv', sep = '\t', header = TRUE)
TF1 = data_tf$Transcription.factor
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_di.tsv', sep = '\t', header = TRUE)
TF2 = data_tf$Transcription.factor
TF = sort(union(TF1, TF2))
length(TF)
## get TF list
data_tf = read.table('~/Box/Project/2020coxpr/code/TF/HOCOMOCOv11_core_annotation_HUMAN_mono.tsv', sep = '\t', header = TRUE)
TF1 = data_tf$Transcription.factor
length(TF1)
## get TF list
data_tf = read.csv("Human_TF_MotifList_v_1.01.csv")
## get TF list
data_tf = read.csv("~/Box/Project/2020coxpr/code/TF/Human_TF_MotifList_v_1.01.csv")
dim(data_tf)
names(data_tf)
TF = unique(data_tf$HGNC.symbol)
length(TF)
TF = unique(data_tf$HGNC.symbol[data_tf$Motif.evidence == "Direct"])
length(TF)
count_all = cbind(count_normal, count_irr)
TF = intersect(TF, rownames(count_all))
length(TF)
TF
## get TF list
data_tf = read.csv("~/Box/Project/2020coxpr/code/TF/Human_TF_MotifList_v_1.01.csv")
TF = unique(data_tf$HGNC.symbol[data_tf$Motif.evidence == "Direct"])
length(TF)
TF[1:10]
TF[1:200]
FOXL1 %in% rownames(count_all)
"FOXL1" %in% rownames(count_all)
rownames(count_all)[1:100]
## get TF list #http://bioinfo.life.hust.edu.cn/AnimalTFDB/#!/download
data_tf = read.table("Mus_musculus_TF.txt")
## get TF list #http://bioinfo.life.hust.edu.cn/AnimalTFDB/#!/download
data_tf = read.table("~/Box/Project/2020coxpr/code/TF/Mus_musculus_TF.txt")
## get TF list #http://bioinfo.life.hust.edu.cn/AnimalTFDB/#!/download
data_tf = read.table("~/Box/Project/2020coxpr/code/TF/Mus_musculus_TF.txt", sep = "\t")
head(data_tf)
## get TF list #http://bioinfo.life.hust.edu.cn/AnimalTFDB/#!/download
data_tf = read.table("~/Box/Project/2020coxpr/code/TF/Mus_musculus_TF.txt",
sep = "\t", header = T, stringsAsFactors = F)
TF = data_tf$Symbol
length(TF)
TF = intersect(TF, rownames(count_all))
length(TF)
lib_size = colSums(count_all)
summary(lib_size)
lib_size = colSums(count_all)/1e5
summary(lib_size)
## filter genes
count_all_norm = sweep(count_all, 2, lib_size, FUN = "*")
summary(colSums(count_all))
gc()
summary(colSums(count_all_norm))
## filter genes
count_all_norm = sweep(count_all, 1, lib_size, FUN = "*")
## parameter s_i
lib_size = 1e5/colSums(count_all)
summary(lib_size)
## filter genes
count_all_norm = sweep(count_all, 2, lib_size, FUN = "*")
summary(colSums(count_all_norm))
detect_rate = rowMeans(count_all_norm > 0)
detect_rate[1:4]
summary(detect_rate)
count_all_norm = count_all_norm[detect_rate > 0.1, ]
dim(count_all_norm)
TF = intersect(TF, rownames(count_all))
length(TF)
TF = intersect(TF, rownames(count_all_norm))
length(TF)
TF_mean = rowMeans(count_all_norm)[TF]
TF_mean[1:10]
summary(TF_mean)
which.max(TF_mean)
TF = TF[order(TF_mean, decreasing = T)][1:100]
TF[1:5]
genes = rownames(count_all_norm)
length(genes)
100*100*30/24
100*100*30/3600
50*50*30/3600
cor(count_all[TF[1]], count_all[genes[1]])
cor(count_all[TF[1],], count_all[genes[1],])
plot(count_all[TF[1],], count_all[genes[1],])
plot(count_all[TF[1],], count_all[genes[1],])
plot(count_all[TF[1],1:500], count_all[genes[1],1:500])
plot(count_all[TF[1],501:1000], count_all[genes[1],501:1000])
100*100*10/3600
100*100*10/3600/10
100*200*10/3600/10
plot(count_all[TF[1],], count_all[genes[2],])
plot(count_all[TF[1],1:500], count_all[genes[2],1:500])
plot(count_all[TF[1],501:1000], count_all[genes[2],501:1000])
12*5%
12*0.05
setwd("~/Dropbox/Rpkgs-dev/TUBE_dev")
devtools::create("TUBE")
